const ActivityLogs = require('../models/activity-logs');
const logger = require('../log');

/**
 * ÌôúÎèô Î°úÍ∑∏ Í∏∞Î°ù Ìó¨Ìçº Ìï®Ïàò (Î≥¥Ïïà Í≥†Î†§ÌïòÏó¨ Í∏∞Î°ù)
 * @param {Object} req - Express request Í∞ùÏ≤¥
 * @param {string} action - ÏàòÌñâÎêú Ïï°ÏÖò (Ïòà: 'create', 'update', 'delete', 'login')
 * @param {string} resourceType - Î¶¨ÏÜåÏä§ ÌÉÄÏûÖ (Ïòà: 'blog', 'project', 'user', 'auth')
 * @param {string} resourceId - Î¶¨ÏÜåÏä§ ID (ÏÑ†ÌÉùÏÇ¨Ìï≠)
 * @param {string} resourceName - Î¶¨ÏÜåÏä§ Ïù¥Î¶Ñ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
 * @param {string} details - ÏÉÅÏÑ∏ Ï†ïÎ≥¥ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
 */
async function logActivity(req, action, resourceType, resourceId = null, resourceName = null, details = null) {
    try {
        // req.adminÏù¥ ÏóÜÏúºÎ©¥ Î°úÍ∑∏ Í∏∞Î°ù Î∂àÍ∞Ä
        if (!req.admin || !req.admin.id) {
            logger.warn('ÌôúÎèô Î°úÍ∑∏ Í∏∞Î°ù Ïã§Ìå®: Ïù∏Ï¶ù Ï†ïÎ≥¥ ÏóÜÏùå');
            return;
        }

        // IP Ï£ºÏÜå ÎßàÏä§ÌÇπ (Î≥¥Ïïà Í∞ïÌôî)
        const maskedIP = maskIPAddress(req.ip);
        
        // User AgentÏóêÏÑú ÎØºÍ∞êÌïú Ï†ïÎ≥¥ Ï†úÍ±∞ (Î≥¥Ïïà Í∞ïÌôî)
        const sanitizedUserAgent = sanitizeUserAgent(req.headers['user-agent']);

        const logData = {
            user_id: req.admin.id,
            username: req.admin.username,
            action,
            resource_type: resourceType,
            resource_id: resourceId,
            resource_name: resourceName,
            details,
            ip_address: maskedIP,
            user_agent: sanitizedUserAgent
        };

        await ActivityLogs.create(logData);
        logger.info(`üìù ÌôúÎèô Î°úÍ∑∏ Í∏∞Î°ù: ${req.admin.username} - ${action} ${resourceType}`);
    } catch (error) {
        logger.error('ÌôúÎèô Î°úÍ∑∏ Í∏∞Î°ù Ïã§Ìå®:', error);
        // Î°úÍ∑∏ Í∏∞Î°ù Ïã§Ìå®Ìï¥ÎèÑ Î©îÏù∏ Í∏∞Îä•ÏùÄ Í≥ÑÏÜç ÎèôÏûë
    }
}

/**
 * IP Ï£ºÏÜå ÎßàÏä§ÌÇπ (Î≥¥Ïïà Í∞ïÌôî)
 * @param {string} ip - ÏõêÎ≥∏ IP Ï£ºÏÜå
 * @returns {string} ÎßàÏä§ÌÇπÎêú IP Ï£ºÏÜå
 */
function maskIPAddress(ip) {
    if (!ip) return null;
    
    // IPv4 Ï£ºÏÜå (Ïòà: 192.168.1.100 ‚Üí 192.168.1.***)
    if (ip.includes('.')) {
        const parts = ip.split('.');
        if (parts.length === 4) {
            return `${parts[0]}.${parts[1]}.${parts[2]}.***`;
        }
    }
    
    // IPv6 Ï£ºÏÜå (Ïòà: 2001:db8::1 ‚Üí 2001:db8::***)
    if (ip.includes(':')) {
        const parts = ip.split(':');
        if (parts.length >= 4) {
            return `${parts[0]}:${parts[1]}::***`;
        }
    }
    
    // Î°úÏª¨ Ï£ºÏÜåÎÇò Í∏∞ÌÉÄ ÌòïÏãù
    return ip;
}

/**
 * User AgentÏóêÏÑú OSÏôÄ Î∏åÎùºÏö∞Ï†ÄÎßå Ï∂îÏ∂ú (Í∞ÑÎã®ÌïòÍ≤å)
 * @param {string} userAgent - ÏõêÎ≥∏ User Agent
 * @returns {string} OS + Î∏åÎùºÏö∞Ï†Ä Ï†ïÎ≥¥
 */
function sanitizeUserAgent(userAgent) {
    if (!userAgent) return null;
    
    let os = 'Unknown';
    let browser = 'Unknown';
    
    // OS Ï†ïÎ≥¥ Ï∂îÏ∂ú
    if (userAgent.includes('Windows')) {
        os = 'Windows';
    } else if (userAgent.includes('Mac OS X') || userAgent.includes('Macintosh')) {
        os = 'macOS';
    } else if (userAgent.includes('iPhone')) {
        os = 'iOS';
    } else if (userAgent.includes('Android')) {
        os = 'Android';
    } else if (userAgent.includes('Linux')) {
        os = 'Linux';
    }
    
    // Î∏åÎùºÏö∞Ï†Ä Ï†ïÎ≥¥ Ï∂îÏ∂ú
    if (userAgent.includes('Chrome')) {
        browser = 'Chrome';
    } else if (userAgent.includes('Firefox')) {
        browser = 'Firefox';
    } else if (userAgent.includes('Safari')) {
        browser = 'Safari';
    } else if (userAgent.includes('Edge')) {
        browser = 'Edge';
    }
    
    return `${os} + ${browser}`;
}

/**
 * Í∞ÑÌé∏Ìïú Î°úÍ∑∏ Ìï®ÏàòÎì§
 */
const activityLogger = {
    // Î°úÍ∑∏Ïù∏
    login: (req) => logActivity(req, 'login', 'auth', null, null, 'Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏'),
    
    // Î°úÍ∑∏ÏïÑÏõÉ
    logout: (req) => logActivity(req, 'logout', 'auth', null, null, 'Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏ÏïÑÏõÉ'),
    
    // Î∏îÎ°úÍ∑∏ Í¥ÄÎ†®
    blog: {
        create: (req, postId, postTitle) => logActivity(req, 'create', 'blog', postId, postTitle, 'Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÏÉùÏÑ±'),
        update: (req, postId, postTitle) => logActivity(req, 'update', 'blog', postId, postTitle, 'Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÏàòÏ†ï'),
        delete: (req, postId, postTitle) => logActivity(req, 'delete', 'blog', postId, postTitle, 'Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÏÇ≠Ï†ú'),
        publish: (req, postId, postTitle) => logActivity(req, 'publish', 'blog', postId, postTitle, 'Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Î∞úÌñâ'),
        unpublish: (req, postId, postTitle) => logActivity(req, 'unpublish', 'blog', postId, postTitle, 'Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÎπÑÎ∞úÌñâ')
    },
    
    // ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ†®
    project: {
        create: (req, projectId, projectTitle) => logActivity(req, 'create', 'project', projectId, projectTitle, 'ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±'),
        update: (req, projectId, projectTitle) => logActivity(req, 'update', 'project', projectId, projectTitle, 'ÌîÑÎ°úÏ†ùÌä∏ ÏàòÏ†ï'),
        delete: (req, projectId, projectTitle) => logActivity(req, 'delete', 'project', projectId, projectTitle, 'ÌîÑÎ°úÏ†ùÌä∏ ÏÇ≠Ï†ú'),
        togglePublish: (req, projectId, projectTitle, isPublished) => logActivity(req, isPublished ? 'publish' : 'unpublish', 'project', projectId, projectTitle, `ÌîÑÎ°úÏ†ùÌä∏ ${isPublished ? 'Î∞úÌñâ' : 'ÎπÑÎ∞úÌñâ'}`),
        toggleFeatured: (req, projectId, projectTitle, isFeatured) => logActivity(req, isFeatured ? 'feature' : 'unfeature', 'project', projectId, projectTitle, `ÌîÑÎ°úÏ†ùÌä∏ ${isFeatured ? 'ÎåÄÌëú ÏÑ§Ï†ï' : 'ÎåÄÌëú Ìï¥Ï†ú'}`)
    },
    
    // ÌÉúÍ∑∏ Í¥ÄÎ†®
    tag: {
        create: (req, tagId, tagName) => logActivity(req, 'create', 'tag', tagId, tagName, 'ÌÉúÍ∑∏ ÏÉùÏÑ±'),
        update: (req, tagId, tagName) => logActivity(req, 'update', 'tag', tagId, tagName, 'ÌÉúÍ∑∏ ÏàòÏ†ï'),
        delete: (req, tagId, tagName) => logActivity(req, 'delete', 'tag', tagId, tagName, 'ÌÉúÍ∑∏ ÏÇ≠Ï†ú')
    },
    
    // ÏÇ¨Ïö©Ïûê Í¥ÄÎ†®
    user: {
        create: (req, userId, username) => logActivity(req, 'create', 'user', userId, username, 'ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±'),
        update: (req, userId, username) => logActivity(req, 'update', 'user', userId, username, 'ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏàòÏ†ï'),
        delete: (req, userId, username) => logActivity(req, 'delete', 'user', userId, username, 'ÏÇ¨Ïö©Ïûê ÏÇ≠Ï†ú'),
        toggleStatus: (req, userId, username, isActive) => logActivity(req, isActive ? 'activate' : 'deactivate', 'user', userId, username, `ÏÇ¨Ïö©Ïûê ${isActive ? 'ÌôúÏÑ±Ìôî' : 'ÎπÑÌôúÏÑ±Ìôî'}`)
    },
    
    // Ïó∞ÎùΩÏ≤ò Í¥ÄÎ†®
    contact: {
        markAsRead: (req, messageId) => logActivity(req, 'mark_read', 'contact', messageId, null, 'Ïó∞ÎùΩÏ≤ò Î©îÏãúÏßÄ ÏùΩÏùå Ï≤òÎ¶¨'),
        markAsUnread: (req, messageId) => logActivity(req, 'mark_unread', 'contact', messageId, null, 'Ïó∞ÎùΩÏ≤ò Î©îÏãúÏßÄ ÏùΩÏßÄ ÏïäÏùå Ï≤òÎ¶¨'),
        delete: (req, messageId) => logActivity(req, 'delete', 'contact', messageId, null, 'Ïó∞ÎùΩÏ≤ò Î©îÏãúÏßÄ ÏÇ≠Ï†ú')
    },
    
    // ÌååÏùº Í¥ÄÎ†®
    file: {
        upload: (req, filename) => logActivity(req, 'upload', 'file', null, filename, 'ÌååÏùº ÏóÖÎ°úÎìú'),
        delete: (req, filename) => logActivity(req, 'delete', 'file', null, filename, 'ÌååÏùº ÏÇ≠Ï†ú')
    },
    
    // ÏÑ§Ï†ï Í¥ÄÎ†®
    settings: {
        update: (req, settingKey) => logActivity(req, 'update', 'settings', null, settingKey, 'ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Î≥ÄÍ≤Ω')
    },
    
    // ÏùºÎ∞òÏ†ÅÏù∏ Ïï°ÏÖò
    general: {
        view: (req, resourceType, resourceId, resourceName) => logActivity(req, 'view', resourceType, resourceId, resourceName, 'Î¶¨ÏÜåÏä§ Ï°∞Ìöå'),
        export: (req, resourceType) => logActivity(req, 'export', resourceType, null, null, `${resourceType} Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞`),
        import: (req, resourceType) => logActivity(req, 'import', resourceType, null, null, `${resourceType} Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞`)
    }
};

module.exports = {
    logActivity,
    activityLogger
};
